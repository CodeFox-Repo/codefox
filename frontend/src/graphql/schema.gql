# ------------------------------------------------------
# THIS FILE WAS AUTOMATICALLY GENERATED (DO NOT MODIFY)
# ------------------------------------------------------

type AvatarUploadResponse {
  avatarUrl: String!
  success: Boolean!
}

type Chat {
  createdAt: Date!
  id: ID!
  isActive: Boolean!
  isDeleted: Boolean!
  messages: [Message!]
  project: Project
  title: String
  updatedAt: Date!
  user: User!
  userId: ID!
}

type ChatCompletionChoiceType {
  delta: ChatCompletionDeltaType
  finishReason: String
  index: Float
}

type ChatCompletionChunkType {
  choices: [ChatCompletionChoiceType!]!
  created: Float
  id: String!
  model: String
  object: String
  status: StreamStatus!
  systemFingerprint: String
}

type ChatCompletionDeltaType {
  content: String
}

input ChatFilterInput {
  isActive: Boolean
  isDeleted: Boolean
  projectId: String
  search: String
  userId: String
}

input ChatInputType {
  chatId: String!
  message: String!
  model: String!
  role: String!
}

input CheckTokenInput {
  token: String!
}

input CreateChatInput {
  projectId: ID
  title: String!
}

input CreateMenuInput {
  name: String!
  path: String!
  permission: String!
  roleIds: [String!]
}

input CreateProjectInput {
  databaseType: String
  description: String!
  model: String = "gpt-4o-mini"
  packages: [ProjectPackage!]
  projectName: String
  public: Boolean
}

input CreateRoleInput {
  description: String
  menuIds: [String!]
  name: String!
}

input CreateUserInput {
  email: String!
  password: String!
  roleIds: [String!]! = []
  username: String!
}

type DashboardStats {
  activeChats: Int!
  activeProjects: Int!
  activeUsers: Int!
  totalChats: Int!
  totalMenus: Int!
  totalProjects: Int!
  totalRoles: Int!
  totalUsers: Int!
}

"""Date custom scalar type"""
scalar Date

type EmailConfirmationResponse {
  message: String!
  success: Boolean
}

input FetchPublicProjectsInputs {
  size: Float!
  strategy: String!
}

input IsValidProjectInput {
  projectId: ID!
  projectPath: String
}

type LoginResponse {
  accessToken: String!
  refreshToken: String!
}

input LoginUserInput {
  email: String!
  password: String!
}

type Menu {
  createdAt: Date!
  description: String
  id: ID!
  isActive: Boolean!
  isDeleted: Boolean!
  name: String!
  path: String!
  permission: String!
  roles: [SystemRole!]
  updatedAt: Date!
}

type Message {
  content: String!
  createdAt: Date!
  id: ID!
  isActive: Boolean!
  isDeleted: Boolean!
  modelId: String
  role: Role!
  updatedAt: Date!
}

type Mutation {
  clearChatHistory(chatId: String!): Boolean!
  confirmEmail(token: String!): EmailConfirmationResponse!
  createChat(newChatInput: NewChatInput!): Chat!
  createDashboardChat(input: CreateChatInput!): Chat!
  createDashboardProject(input: CreateProjectInput!): Chat!
  createDashboardRole(input: CreateRoleInput!): SystemRole!
  createDashboardUser(input: CreateUserInput!): User!
  createMenu(createMenuInput: CreateMenuInput!): Menu!
  createProject(createProjectInput: CreateProjectInput!): Chat!
  createRole(createRoleInput: CreateRoleInput!): SystemRole!
  deleteChat(chatId: String!): Boolean!
  deleteDashboardChat(id: ID!): Boolean!
  deleteDashboardProject(id: ID!): Boolean!
  deleteDashboardRole(id: ID!): Boolean!
  deleteDashboardUser(id: ID!): Boolean!
  deleteProject(projectId: String!): Boolean!
  forkProject(projectId: ID!): Chat!
  login(input: LoginUserInput!): LoginResponse!
  refreshToken(refreshToken: String!): RefreshTokenResponse!
  regenerateDescription(input: String!): String!
  registerUser(input: RegisterUserInput!): User!
  removeMenu(id: ID!): Boolean!
  removeRole(id: ID!): Boolean!
  resendConfirmationEmail(input: ResendEmailInput!): EmailConfirmationResponse!
  saveMessage(input: ChatInputType!): Boolean!
  subscribeToProject(projectId: ID!): Project!
  syncProjectToGitHub(projectId: String!): Project!
  triggerChatStream(input: ChatInputType!): Boolean!
  updateChatTitle(updateChatTitleInput: UpdateChatTitleInput!): Chat
  updateDashboardChat(id: ID!, input: UpdateChatInput!): Chat!
  updateDashboardProject(id: ID!, input: UpdateProjectInput!): Project!
  updateDashboardRole(id: ID!, input: UpdateRoleInput!): SystemRole!
  updateDashboardUser(id: ID!, input: UpdateUserInput!): User!
  updateMenu(updateMenuInput: UpdateMenuInput!): Menu!
  updateProjectPhoto(input: UpdateProjectPhotoInput!): Project!
  updateProjectPublicStatus(isPublic: Boolean!, projectId: ID!): Project!
  updateRole(updateRoleInput: UpdateRoleInput!): SystemRole!
  uploadAvatar(file: Upload!): AvatarUploadResponse!
}

input NewChatInput {
  title: String
}

type Project {
  chats: [Chat!]!
  createdAt: Date!
  forkedFrom: Project
  forkedFromId: String
  forks: [Project!]
  githubOwner: String
  githubRepoName: String
  githubRepoUrl: String
  id: ID!
  isActive: Boolean!
  isDeleted: Boolean!
  isPublic: Boolean!
  isSyncedWithGitHub: Boolean!
  photoUrl: String
  projectName: String!
  projectPackages: [ProjectPackages!]
  projectPath: String!
  subNumber: Float!

  """Projects that are copies of this project"""
  subscribers: [Project!]
  uniqueProjectId: String!
  updatedAt: Date!
  user: User!
  userId: ID!
}

input ProjectFilterInput {
  createdAfter: Date
  createdBefore: Date
  isActive: Boolean
  isDeleted: Boolean
  isPublic: Boolean
  search: String
  userId: String
}

input ProjectPackage {
  name: String!
  version: String!
}

type ProjectPackages {
  content: String!
  createdAt: Date!
  id: ID!
  isActive: Boolean!
  isDeleted: Boolean!
  name: String!
  updatedAt: Date!
  version: String!
}

type Query {
  checkToken(input: CheckTokenInput!): Boolean!
  dashboardChat(id: ID!): Chat!
  dashboardChats(filter: ChatFilterInput): [Chat!]!
  dashboardProject(id: ID!): Project!
  dashboardProjects(filter: ProjectFilterInput): [Project!]!
  dashboardRole(id: ID!): SystemRole!
  dashboardRoles: [SystemRole!]!
  dashboardStats: DashboardStats!
  dashboardUser(id: ID!): User!
  dashboardUsers(filter: UserFilterInput): [User!]!
  fetchPublicProjects(input: FetchPublicProjectsInputs!): [Project!]!
  getAvailableModelTags: [String!]
  getChatDetails(chatId: String!): Chat
  getChatHistory(chatId: String!): [Message!]!
  getCurProject(chatId: String!): Project
  getHello: String!
  getProject(projectId: String!): Project!
  getRemainingProjectLimit: Int!
  getSubscribedProjects: [Project!]!
  getUserAvatar(userId: String!): String
  getUserChats: [Chat!]
  getUserProjects: [Project!]!
  isValidateProject(isValidProject: IsValidProjectInput!): Boolean!
  logout: Boolean!
  me: User!
  menu(id: ID!): Menu!
  menus: [Menu!]!
  role(id: ID!): SystemRole!
  roles: [SystemRole!]!
}

type RefreshTokenResponse {
  accessToken: String!
  refreshToken: String!
}

input RegisterUserInput {
  confirmPassword: String!
  email: String!
  password: String!
  username: String!
}

input ResendEmailInput {
  email: String!
}

enum Role {
  Assistant
  System
  User
}

enum StreamStatus {
  DONE
  STREAMING
}

type Subscription {
  chatStream(input: ChatInputType!): ChatCompletionChunkType
}

type SystemRole {
  createdAt: Date!
  description: String
  id: ID!
  isActive: Boolean!
  isDeleted: Boolean!
  menus: [Menu!]
  name: String!
  updatedAt: Date!
  users: [User!]
}

input UpdateChatInput {
  isActive: Boolean
  title: String
}

input UpdateChatTitleInput {
  chatId: String!
  title: String
}

input UpdateMenuInput {
  id: ID!
  isActive: Boolean
  name: String
  path: String
  permission: String
  roleIds: [String!]
}

input UpdateProjectInput {
  isActive: Boolean
  isPublic: Boolean
  packageIds: [ID!]
  projectName: String
  projectPath: String
}

input UpdateProjectPhotoInput {
  file: Upload!
  projectId: ID!
}

input UpdateRoleInput {
  description: String
  id: ID!
  isActive: Boolean
  menuIds: [String!]
  name: String
}

input UpdateUserInput {
  email: String
  isActive: Boolean
  password: String
  roleIds: [String!]
  username: String
}

"""The `Upload` scalar type represents a file upload."""
scalar Upload

type User {
  avatarUrl: String
  chats: [Chat!]!
  createdAt: Date!
  email: String!
  githubInstallationId: String
  id: ID!
  isActive: Boolean!
  isDeleted: Boolean!
  isEmailConfirmed: Boolean!
  lastEmailSendTime: Date!
  projects: [Project!]!
  roles: [SystemRole!]!
  subscribedProjects: [Project!] @deprecated(reason: "Use projects with forkedFromId instead")
  updatedAt: Date!
  username: String!
}

input UserFilterInput {
  isActive: Boolean
  search: String
}